<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.nwsuaf.mapper.ParentMapper">
    <resultMap id="BaseResultMap" type="cn.edu.nwsuaf.entity.Parent">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="userid" property="userid" jdbcType="INTEGER"/>
        <result column="studentid" property="studentid" jdbcType="INTEGER"/>
        <result column="relativetype" property="relativetype" jdbcType="VARCHAR"/>
        <result column="relativeappellation" property="relativeappellation" jdbcType="VARCHAR"/>
        <result column="relativename" property="relativename" jdbcType="VARCHAR"/>
        <result column="relativetelephone" property="relativetelephone" jdbcType="VARCHAR"/>
        <result column="fixedphone" property="fixedphone" jdbcType="VARCHAR"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="zipcode" property="zipcode" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, userid, studentid, relativetype, relativeappellation, relativename, relativetelephone, 
    fixedphone, address, zipcode
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.edu.nwsuaf.entity.ParentExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from PARENT
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from PARENT
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from PARENT
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="cn.edu.nwsuaf.entity.ParentExample">
        delete from PARENT
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.edu.nwsuaf.entity.Parent">
    insert into PARENT (id, userid, studentid, 
      relativetype, relativeappellation, relativename, 
      relativetelephone, fixedphone, address, 
      zipcode)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{studentid,jdbcType=INTEGER}, 
      #{relativetype,jdbcType=VARCHAR}, #{relativeappellation,jdbcType=VARCHAR}, #{relativename,jdbcType=VARCHAR}, 
      #{relativetelephone,jdbcType=VARCHAR}, #{fixedphone,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, 
      #{zipcode,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="cn.edu.nwsuaf.entity.Parent">
        insert into PARENT
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userid != null">
                userid,
            </if>
            <if test="studentid != null">
                studentid,
            </if>
            <if test="relativetype != null">
                relativetype,
            </if>
            <if test="relativeappellation != null">
                relativeappellation,
            </if>
            <if test="relativename != null">
                relativename,
            </if>
            <if test="relativetelephone != null">
                relativetelephone,
            </if>
            <if test="fixedphone != null">
                fixedphone,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="zipcode != null">
                zipcode,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userid != null">
                #{userid,jdbcType=INTEGER},
            </if>
            <if test="studentid != null">
                #{studentid,jdbcType=INTEGER},
            </if>
            <if test="relativetype != null">
                #{relativetype,jdbcType=VARCHAR},
            </if>
            <if test="relativeappellation != null">
                #{relativeappellation,jdbcType=VARCHAR},
            </if>
            <if test="relativename != null">
                #{relativename,jdbcType=VARCHAR},
            </if>
            <if test="relativetelephone != null">
                #{relativetelephone,jdbcType=VARCHAR},
            </if>
            <if test="fixedphone != null">
                #{fixedphone,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="zipcode != null">
                #{zipcode,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.edu.nwsuaf.entity.ParentExample" resultType="java.lang.Integer">
        select count(*) from PARENT
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update PARENT
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.userid != null">
                userid = #{record.userid,jdbcType=INTEGER},
            </if>
            <if test="record.studentid != null">
                studentid = #{record.studentid,jdbcType=INTEGER},
            </if>
            <if test="record.relativetype != null">
                relativetype = #{record.relativetype,jdbcType=VARCHAR},
            </if>
            <if test="record.relativeappellation != null">
                relativeappellation = #{record.relativeappellation,jdbcType=VARCHAR},
            </if>
            <if test="record.relativename != null">
                relativename = #{record.relativename,jdbcType=VARCHAR},
            </if>
            <if test="record.relativetelephone != null">
                relativetelephone = #{record.relativetelephone,jdbcType=VARCHAR},
            </if>
            <if test="record.fixedphone != null">
                fixedphone = #{record.fixedphone,jdbcType=VARCHAR},
            </if>
            <if test="record.address != null">
                address = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.zipcode != null">
                zipcode = #{record.zipcode,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update PARENT
        set id = #{record.id,jdbcType=INTEGER},
        userid = #{record.userid,jdbcType=INTEGER},
        studentid = #{record.studentid,jdbcType=INTEGER},
        relativetype = #{record.relativetype,jdbcType=VARCHAR},
        relativeappellation = #{record.relativeappellation,jdbcType=VARCHAR},
        relativename = #{record.relativename,jdbcType=VARCHAR},
        relativetelephone = #{record.relativetelephone,jdbcType=VARCHAR},
        fixedphone = #{record.fixedphone,jdbcType=VARCHAR},
        address = #{record.address,jdbcType=VARCHAR},
        zipcode = #{record.zipcode,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.edu.nwsuaf.entity.Parent">
        update PARENT
        <set>
            <if test="userid != null">
                userid = #{userid,jdbcType=INTEGER},
            </if>
            <if test="studentid != null">
                studentid = #{studentid,jdbcType=INTEGER},
            </if>
            <if test="relativetype != null">
                relativetype = #{relativetype,jdbcType=VARCHAR},
            </if>
            <if test="relativeappellation != null">
                relativeappellation = #{relativeappellation,jdbcType=VARCHAR},
            </if>
            <if test="relativename != null">
                relativename = #{relativename,jdbcType=VARCHAR},
            </if>
            <if test="relativetelephone != null">
                relativetelephone = #{relativetelephone,jdbcType=VARCHAR},
            </if>
            <if test="fixedphone != null">
                fixedphone = #{fixedphone,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="zipcode != null">
                zipcode = #{zipcode,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.edu.nwsuaf.entity.Parent">
    update PARENT
    set userid = #{userid,jdbcType=INTEGER},
      studentid = #{studentid,jdbcType=INTEGER},
      relativetype = #{relativetype,jdbcType=VARCHAR},
      relativeappellation = #{relativeappellation,jdbcType=VARCHAR},
      relativename = #{relativename,jdbcType=VARCHAR},
      relativetelephone = #{relativetelephone,jdbcType=VARCHAR},
      fixedphone = #{fixedphone,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      zipcode = #{zipcode,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>